@startuml "Диаграмма классов"

abstract class "Player" as Player {
    - nickName : String
    - currentGame : Game
    + startGame(): void
}

class "Wisher" as Wisher {
    + makeWord(Word word) : void
}

class "Guesser" as Guesser {
    + nameLetter(Letter letter) : bool
}

class "Game" as Game {
    - status : GameStatus
    - hangmanStatus : HangmanStatus
    - hiddenWord : Word
    - players : Player[2]
    - renderingEngine : RenderingEngine
    - hangmanMachine : HangmanMachine
    - gameMachine : GameMachine
    + Game(Player[] players)
    + Game(Player[] players, Word hiddenWord)
    + InitWord(Word hiddenWord)
    + guessLetterInWord(Letter letter) : bool
}

class "Word" as Word {
    - word : String
}

class "RenderingEngine" as RenderingEngine {
    + RenderGame(Game game) : void
}

class "GameStatus" as GameStatus {
    + CONTINUING
    + WISHER_WON
    + GUESSER_WON
}


class "HangmanStatus" as HangmanStatus {
    + EMPTY
    + HEAD
    + BODY
    + LEFT_HAND
    + RIGHT_HAND
    + LEFT_LEG
    + RIGHT_LEG
}

abstract class "Machine<S, A>" as Machine {
    # transitionFunction : Function<S, S>
    + {abstract} transit(A transition) : S
}

class "HangmanMachine<HangmanStatus, bool>" as HangmanMachine {
    # transitionFunction : Function<HangmanStatus, HangmanStatus>
    + transit(bool isLastLetterGuessed) : HangmanStatus
}

class "GameMachine<GameStatus, Game>" as GameMachine {
    # transitionFunction : Function<GameStatus, GameStatus>
    + transit(Game transition) : GameStatus
}

Wisher -up-||> Player
Guesser -up-||> Player

HangmanMachine -up-||> Machine
GameMachine -up-||> Machine

Game "0..1" o-- "2" Player : Играют в
Game *-left- Word : Задается при создании
Game o-right- HangmanMachine : Использует после хода
Game o-up- GameMachine : Использует после хода
Game *-- HangmanStatus
Game *-- GameStatus
Game *-- RenderingEngine

@enduml